<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Tracker_AI2_DC_Power.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Tracker_AI2_DC_Power.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jun 11 10:42:18 2020
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; OSInit &rArr; OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[18e]">CPU_IntDis</a>
 <LI><a href="#[18f]">CPU_IntEn</a>
 <LI><a href="#[8a]">CPU_SR_Save</a>
 <LI><a href="#[8b]">CPU_SR_Restore</a>
 <LI><a href="#[190]">CPU_WaitForInt</a>
 <LI><a href="#[191]">CPU_WaitForExcept</a>
 <LI><a href="#[113]">CPU_CntLeadZeros</a>
 <LI><a href="#[192]">CPU_CntTrailZeros</a>
 <LI><a href="#[193]">CPU_RevBits</a>
 <LI><a href="#[76]">__user_initial_stackheap</a>
 <LI><a href="#[f8]">OSStartHighRdy</a>
 <LI><a href="#[f4]">OSCtxSw</a>
 <LI><a href="#[f2]">OSIntCtxSw</a>
 <LI><a href="#[b]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">BatteryCharacterB7030</a> from batterypower.o(i.BatteryCharacterB7030) referenced from batterypower.o(i.BatteryPowerInit)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from adcsample.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">DMA2C5Send</a> from modbusframehal.o(i.DMA2C5Send) referenced from modbusframehal.o(i.ModbusPortInit)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from asprotocol.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">LedIWDG</a> from main.o(i.LedIWDG) referenced from main.o(i.main)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">ModbusOverLoRa</a> from main.o(i.ModbusOverLoRa) referenced from main.o(i.main)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[b]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(CODE) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(i.OS_CPU_SysTickHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">OS_IdleTask</a> from os_core.o(i.OS_IdleTask) referenced from os_core.o(i.OS_IdleTaskInit)
 <LI><a href="#[5d]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[5f]">OS_TickTask</a> from os_tick.o(i.OS_TickTask) referenced from os_tick.o(i.OS_TickTaskInit)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">ParameterSave</a> from main.o(i.ParameterSave) referenced from main.o(i.main)
 <LI><a href="#[62]">PowerManagement</a> from main.o(i.PowerManagement) referenced from main.o(i.main)
 <LI><a href="#[59]">RBatCurrent</a> from asprotocol.o(i.RBatCurrent) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[57]">RBatSOCTemp</a> from asprotocol.o(i.RBatSOCTemp) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[56]">RBatState</a> from asprotocol.o(i.RBatState) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[58]">RBatVoltage</a> from asprotocol.o(i.RBatVoltage) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">RDeviceEdition</a> from asprotocol.o(i.RDeviceEdition) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[51]">RDeviceType</a> from asprotocol.o(i.RDeviceType) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[54]">RMotorCurrent</a> from asprotocol.o(i.RMotorCurrent) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[55]">RPVBuckerVoltage</a> from asprotocol.o(i.RPVBuckerVoltage) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from rtclocalmodule.o(i.RTCAlarm_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">RTemp</a> from asprotocol.o(i.RTemp) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[5a]">RWComID</a> from asprotocol.o(i.RWComID) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[52]">RWNull</a> from asprotocol.o(i.RWNull) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[4d]">RWWorkMode1</a> from asprotocol.o(i.RWWorkMode1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[4e]">RWWorkMode2</a> from asprotocol.o(i.RWWorkMode2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[4f]">RWarningAndFault1</a> from asprotocol.o(i.RWarningAndFault1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[50]">RWarningAndFault2</a> from asprotocol.o(i.RWarningAndFault2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">Sampling</a> from main.o(i.Sampling) referenced from main.o(i.main)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from modbusframehal.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from modbusframehal.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[66]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[68]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[69]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[16d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[16e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[170]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[171]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[172]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[173]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[174]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[175]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[176]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[177]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[178]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[179]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[180]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[181]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[182]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[72]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[183]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[184]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[188]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[189]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[67]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[18a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[18b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[71]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[18d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[73]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[18e]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[8b]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[190]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>

<P><STRONG><a name="[192]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[194]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[70]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[197]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[198]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[199]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[f4]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[f2]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[b]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>ASProtocolInit</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, asprotocol.o(i.ASProtocolInit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
</UL>

<P><STRONG><a name="[78]"></a>BatErrorLedOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, batterypower.o(i.BatErrorLedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BatErrorLedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[7a]"></a>BatErrorLedOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, batterypower.o(i.BatErrorLedOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BatErrorLedOn
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[80]"></a>BatteryPowerInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, batterypower.o(i.BatteryPowerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BatteryPowerInit &rArr; ChargerInit &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeLedInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryType
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTypeIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerInit
</UL>

<P><STRONG><a name="[89]"></a>CPU_IntDisMeasMaxCurGet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCurGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
</UL>

<P><STRONG><a name="[8d]"></a>CPU_IntDisMeasMaxCurReset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCurReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[8e]"></a>CPU_IntDisMeasStart</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, cpu_core.o(i.CPU_IntDisMeasStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CPU_IntDisMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[90]"></a>CPU_IntDisMeasStop</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, cpu_core.o(i.CPU_IntDisMeasStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[8f]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
</UL>

<P><STRONG><a name="[81]"></a>ChargeLedInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, batterypower.o(i.ChargeLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ChargeLedInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>

<P><STRONG><a name="[96]"></a>ChargeLedOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, batterypower.o(i.ChargeLedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChargeLedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[97]"></a>ChargeLedOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, batterypower.o(i.ChargeLedOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChargeLedOn
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[94]"></a>ChargerActive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, batterypower.o(i.ChargerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ChargerActive &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
</UL>

<P><STRONG><a name="[95]"></a>ChargerReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, batterypower.o(i.ChargerReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ChargerReset &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
</UL>

<P><STRONG><a name="[92]"></a>ChargerSuspend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, batterypower.o(i.ChargerSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ChargerSuspend &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
</UL>

<P><STRONG><a name="[9b]"></a>ClosePVPower</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pvpower.o(i.ClosePVPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClosePVPower
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, adcsample.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2C5Send
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[146]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[9a]"></a>Delayus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iicbsp.o(i.Delayus))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerReset
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetNACK
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetACK
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>

<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, asprotocol.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
</UL>

<P><STRONG><a name="[a4]"></a>EraseNewSystemFlash</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, flashstoragehal.o(i.EraseNewSystemFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EraseNewSystemFlash &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[a6]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[a7]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[ad]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a8]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[a9]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[ab]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
</UL>

<P><STRONG><a name="[ac]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
</UL>

<P><STRONG><a name="[a5]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[aa]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[13e]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
</UL>

<P><STRONG><a name="[88]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeLedInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTypeIOInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVPowerInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDVInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>

<P><STRONG><a name="[c1]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryType
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardwareVersion
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVPowerInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPVPower
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeLedOn
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatErrorLedOn
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaModulePowerOn
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTurnOn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetNACK
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetACK
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>

<P><STRONG><a name="[79]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2C5Send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeLedInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePVPower
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeLedOff
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatErrorLedOff
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSend
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaModulePowerOff
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTurnOff
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetNACK
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetACK
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>

<P><STRONG><a name="[127]"></a>GetASProtocl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, asprotocol.o(i.GetASProtocl))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
</UL>

<P><STRONG><a name="[b1]"></a>GetBatteryChargerState</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, batterypower.o(i.GetBatteryChargerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetBatteryChargerState &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[b3]"></a>GetBatteryCurrent</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, batterypower.o(i.GetBatteryCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetBatteryCurrent &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[b6]"></a>GetBatteryIin</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, batterypower.o(i.GetBatteryIin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetBatteryIin &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[bb]"></a>GetBatterySOC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, batterypower.o(i.GetBatterySOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBatterySOC
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[b9]"></a>GetBatteryTemp</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, batterypower.o(i.GetBatteryTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetBatteryTemp &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[ba]"></a>GetBatteryVin</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, batterypower.o(i.GetBatteryVin))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetBatteryVin &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[b8]"></a>GetBatteryVoltage</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, batterypower.o(i.GetBatteryVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetBatteryVoltage &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[b0]"></a>GetHardwareVersion</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hardwareversion.o(i.GetHardwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetHardwareVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedParaInit
</UL>

<P><STRONG><a name="[c2]"></a>GetTMP</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tmpsensor.o(i.GetTMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetTMP &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[af]"></a>HDVInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hardwareversion.o(i.HDVInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HDVInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedParaInit
</UL>

<P><STRONG><a name="[93]"></a>HeatingCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, batterypower.o(i.HeatingCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HeatingCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
</UL>

<P><STRONG><a name="[83]"></a>IICInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, iicbsp.o(i.IICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IICInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMPSensorInit
</UL>

<P><STRONG><a name="[b2]"></a>IICRead</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, iicbsp.o(i.IICRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetNACK
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetACK
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryIin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryChargerState
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTMP
</UL>

<P><STRONG><a name="[98]"></a>IICWrite</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, iicbsp.o(i.IICWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerSuspend
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerReset
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerActive
</UL>

<P><STRONG><a name="[ca]"></a>IICWriteByte</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, iicbsp.o(i.IICWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IICWriteByte &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP75Init
</UL>

<P><STRONG><a name="[cb]"></a>IWDGInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, init.o(i.IWDGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDGInit &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[d1]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[cf]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[d0]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[ce]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[d3]"></a>LEDFlash</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ledhal.o(i.LEDFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
</UL>

<P><STRONG><a name="[d4]"></a>LEDInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ledhal.o(i.LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
</UL>

<P><STRONG><a name="[d5]"></a>LEDTurnOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledhal.o(i.LEDTurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDTurnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
</UL>

<P><STRONG><a name="[d6]"></a>LEDTurnOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledhal.o(i.LEDTurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDTurnOn
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
</UL>

<P><STRONG><a name="[d8]"></a>LoRaModulePowerOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbusframehal.o(i.LoRaModulePowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaModulePowerOff
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[d9]"></a>LoRaModulePowerOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbusframehal.o(i.LoRaModulePowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaModulePowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[da]"></a>ModbusPortInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, modbusframehal.o(i.ModbusPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ModbusPortInit &rArr; UART1Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[dc]"></a>ModbusRead</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, modbusframehal.o(i.ModbusRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ModbusRead &rArr; CRC16Check
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[de]"></a>ModbusSend</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, modbusframehal.o(i.ModbusSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ModbusSend &rArr; CRC16Check
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[e3]"></a>NVICInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, init.o(i.NVICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVICInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVICInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
</UL>

<P><STRONG><a name="[e4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVICInit
</UL>

<P><STRONG><a name="[ef]"></a>OSCfg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cfg_app.o(i.OSCfg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10b]"></a>OSIdleTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSIdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIdleTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[e6]"></a>OSInit</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>OSInitHook</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[f0]"></a>OSIntExit</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[f3]"></a>OSSched</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, os_core.o(i.OSSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[f5]"></a>OSSchedLock</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedLock &rArr; OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
</UL>

<P><STRONG><a name="[f7]"></a>OSStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>OSTaskCreate</STRONG> (Thumb, 368 bytes, Stack size 72 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>OSTaskCreateHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[ff]"></a>OSTaskDel</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[103]"></a>OSTaskDelHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[117]"></a>OSTaskReturnHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[104]"></a>OSTaskSemPend</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, os_task.o(i.OSTaskSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[106]"></a>OSTaskSemPost</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[fb]"></a>OSTaskStkInit</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[4b]"></a>OSTaskSwHook</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[d7]"></a>OSTimeDly</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManagement
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
</UL>

<P><STRONG><a name="[109]"></a>OSTimeTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[10a]"></a>OSTimeTickHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[c]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, os_cpu_c.o(i.OS_CPU_SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>OS_FlagInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5e]"></a>OS_IdleTask</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, os_core.o(i.OS_IdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_IdleTask &rArr; OSIdleTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_IdleTaskInit)
</UL>
<P><STRONG><a name="[ed]"></a>OS_IdleTaskInit</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, os_core.o(i.OS_IdleTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[105]"></a>OS_Pend</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_core.o(i.OS_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[10d]"></a>OS_PendDataInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OS_PendDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[10e]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, os_core.o(i.OS_PendListInsertPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[102]"></a>OS_PendListRemove</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_core.o(i.OS_PendListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[10f]"></a>OS_PendListRemove1</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_core.o(i.OS_PendListRemove1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>

<P><STRONG><a name="[110]"></a>OS_Post</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, os_core.o(i.OS_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post1
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
</UL>

<P><STRONG><a name="[111]"></a>OS_Post1</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, os_core.o(i.OS_Post1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_Post1
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[f1]"></a>OS_PrioGetHighest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_prio.o(i.OS_PrioGetHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[e8]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[fd]"></a>OS_PrioInsert</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[115]"></a>OS_PrioRemove</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[e9]"></a>OS_RdyListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[112]"></a>OS_RdyListInsert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[114]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[fe]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[100]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(i.OS_RdyListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
</UL>

<P><STRONG><a name="[f6]"></a>OS_SchedLockTimeMeasStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_core.o(i.OS_SchedLockTimeMeasStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[eb]"></a>OS_SemInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10c]"></a>OS_TaskBlock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[ec]"></a>OS_TaskInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[fa]"></a>OS_TaskInitTCB</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskInitTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[5d]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[107]"></a>OS_TaskSemPost</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, os_task.o(i.OS_TaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>

<P><STRONG><a name="[116]"></a>OS_TickListInsert</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
</UL>

<P><STRONG><a name="[108]"></a>OS_TickListInsertDly</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_tick.o(i.OS_TickListInsertDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[101]"></a>OS_TickListRemove</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, os_tick.o(i.OS_TickListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[5f]"></a>OS_TickTask</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TickTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tick.o(i.OS_TickTaskInit)
</UL>
<P><STRONG><a name="[ee]"></a>OS_TickTaskInit</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, os_tick.o(i.OS_TickTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[11a]"></a>OpenPVPower</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pvpower.o(i.OpenPVPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenPVPower
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[11b]"></a>PVPowerInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pvpower.o(i.PVPowerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PVPowerInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerInit
</UL>

<P><STRONG><a name="[131]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[12d]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_pwr.o(i.PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
</UL>

<P><STRONG><a name="[12c]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>ParaInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, init.o(i.ParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ParaInit &rArr; FixedParaInit &rArr; HDVInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedParaInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>PowerInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, powermanagement.o(i.PowerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PowerInit &rArr; BatteryPowerInit &rArr; ChargerInit &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVPowerInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManagement
</UL>

<P><STRONG><a name="[123]"></a>PowerMangement</STRONG> (Thumb, 758 bytes, Stack size 32 bytes, powermanagement.o(i.PowerMangement))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PowerMangement &rArr; GetBatteryInfo &rArr; GetBatteryTemp &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPVPower
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePVPower
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeLedOn
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeLedOff
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatErrorLedOn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatErrorLedOff
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManagement
</UL>

<P><STRONG><a name="[dd]"></a>ProtocolAnalysis</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, protocolanalysis.o(i.ProtocolAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProtocolAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[db]"></a>ProtocolInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, protocolanalysis.o(i.ProtocolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProtocolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASProtocl
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProtocolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[145]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[130]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
</UL>

<P><STRONG><a name="[87]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeLedInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTypeIOInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVPowerInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDVInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>

<P><STRONG><a name="[14e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[cd]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[cc]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[133]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[132]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtclocalmodule.o(i.RTCAlarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTCAlarm_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>RTC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[137]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[139]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[13c]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[129]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[12e]"></a>RTC_Local_Init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, rtclocalmodule.o(i.RTC_Local_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_Local_Init &rArr; RTC_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
</UL>

<P><STRONG><a name="[13d]"></a>RTC_SetAlarm</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[138]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[134]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[135]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
</UL>

<P><STRONG><a name="[11e]"></a>ReadConfigParaFromFlash</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, flashstoragehal.o(i.ReadConfigParaFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadConfigParaFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>TMPSensorInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tmpsensor.o(i.TMPSensorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMPSensorInit &rArr; TMP75Init &rArr; IICWriteByte &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP75Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, modbusframehal.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, modbusframehal.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[14c]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[14b]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[14d]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[148]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[e2]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSend
</UL>

<P><STRONG><a name="[11f]"></a>WriteConfigParaToFlash</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flashstoragehal.o(i.WriteConfigParaToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WriteConfigParaToFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[121]"></a>WriteIAPFlagToFlash</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, flashstoragehal.o(i.WriteIAPFlagToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteIAPFlagToFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[120]"></a>WriteNewSystemToFlash</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flashstoragehal.o(i.WriteNewSystemToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WriteNewSystemToFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVICInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
</UL>

<P><STRONG><a name="[14f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[152]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[156]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[155]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[159]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
</UL>

<P><STRONG><a name="[157]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[151]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[154]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[158]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[15a]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[15c]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[164]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryIin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
</UL>

<P><STRONG><a name="[160]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMotorCurrent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatSOCTemp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatCurrent
</UL>

<P><STRONG><a name="[161]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPVBuckerVoltage
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatVoltage
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatSOCTemp
</UL>

<P><STRONG><a name="[162]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryIin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
</UL>

<P><STRONG><a name="[19d]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[19e]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCharacterB7030
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[163]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[167]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCharacterB7030
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryIin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPVBuckerVoltage
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMotorCurrent
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatVoltage
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatSOCTemp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatCurrent
</UL>

<P><STRONG><a name="[165]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[15d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[150]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCharacterB7030
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[166]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
</UL>

<P><STRONG><a name="[168]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCharacterB7030
</UL>

<P><STRONG><a name="[16a]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[118]"></a>OS_TickListUpdateDly</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_tick.o(i.OS_TickListUpdateDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateDly &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[119]"></a>OS_TickListUpdateTimeout</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_tick.o(i.OS_TickListUpdateTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateTimeout &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[8c]"></a>CPU_IntDisMeasMaxCalc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCalc))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
</UL>

<P><STRONG><a name="[64]"></a>LedIWDG</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.LedIWDG))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LedIWDG &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTurnOn
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTurnOff
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[63]"></a>ModbusOverLoRa</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, main.o(i.ModbusOverLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = ModbusOverLoRa &rArr; ModbusPortInit &rArr; UART1Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAnalysis
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSend
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRead
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPortInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaModulePowerOn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaModulePowerOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[60]"></a>ParameterSave</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, main.o(i.ParameterSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ParameterSave &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigParaFromFlash
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[62]"></a>PowerManagement</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.PowerManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PowerManagement &rArr; PowerMangement &rArr; GetBatteryInfo &rArr; GetBatteryTemp &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[61]"></a>Sampling</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.Sampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Sampling &rArr; GetTMP &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMPSensorInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[11d]"></a>ConfigParaInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init.o(i.ConfigParaInit))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[ae]"></a>FixedParaInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, init.o(i.FixedParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FixedParaInit &rArr; HDVInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDVInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardwareVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[59]"></a>RBatCurrent</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, asprotocol.o(i.RBatCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RBatCurrent &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[57]"></a>RBatSOCTemp</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, asprotocol.o(i.RBatSOCTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RBatSOCTemp &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[56]"></a>RBatState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, asprotocol.o(i.RBatState))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[58]"></a>RBatVoltage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, asprotocol.o(i.RBatVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RBatVoltage &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[4c]"></a>RDeviceEdition</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RDeviceEdition))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[51]"></a>RDeviceType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RDeviceType))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[54]"></a>RMotorCurrent</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, asprotocol.o(i.RMotorCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RMotorCurrent &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[55]"></a>RPVBuckerVoltage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, asprotocol.o(i.RPVBuckerVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RPVBuckerVoltage &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[53]"></a>RTemp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, asprotocol.o(i.RTemp))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[5a]"></a>RWComID</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, asprotocol.o(i.RWComID))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[52]"></a>RWNull</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RWNull))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[4d]"></a>RWWorkMode1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWWorkMode1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[4e]"></a>RWWorkMode2</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, asprotocol.o(i.RWWorkMode2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = RWWorkMode2 &rArr; RTC_Local_Init &rArr; RTC_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[4f]"></a>RWarningAndFault1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RWarningAndFault1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[50]"></a>RWarningAndFault2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RWarningAndFault2))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[a3]"></a>__NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, asprotocol.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWorkMode2
</UL>

<P><STRONG><a name="[91]"></a>ChargeCmd</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, powermanagement.o(i.ChargeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ChargeCmd &rArr; ChargerSuspend &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerSuspend
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerReset
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerActive
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[b7]"></a>GetBatteryInfo</STRONG> (Thumb, 466 bytes, Stack size 8 bytes, powermanagement.o(i.GetBatteryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetBatteryInfo &rArr; GetBatteryTemp &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatterySOC
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryIin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryChargerState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[5b]"></a>BatteryCharacterB7030</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, batterypower.o(i.BatteryCharacterB7030))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BatteryCharacterB7030 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batterypower.o(i.BatteryPowerInit)
</UL>
<P><STRONG><a name="[84]"></a>BatteryTypeIOInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, batterypower.o(i.BatteryTypeIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BatteryTypeIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>

<P><STRONG><a name="[86]"></a>ChargerInit</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, batterypower.o(i.ChargerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ChargerInit &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>

<P><STRONG><a name="[85]"></a>GetBatteryType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, batterypower.o(i.GetBatteryType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBatteryType
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>

<P><STRONG><a name="[82]"></a>HeatingInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, batterypower.o(i.HeatingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HeatingInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>

<P><STRONG><a name="[e1]"></a>CRC16Check</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, modbusframehal.o(i.CRC16Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSend
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRead
</UL>

<P><STRONG><a name="[5c]"></a>DMA2C5Send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, modbusframehal.o(i.DMA2C5Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2C5Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusframehal.o(i.ModbusPortInit)
</UL>
<P><STRONG><a name="[df]"></a>UART1Init</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, modbusframehal.o(i.UART1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = UART1Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPortInit
</UL>

<P><STRONG><a name="[e0]"></a>UART5Init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, modbusframehal.o(i.UART5Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART5Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPortInit
</UL>

<P><STRONG><a name="[144]"></a>TMP75Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tmpsensor.o(i.TMP75Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMP75Init &rArr; IICWriteByte &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMPSensorInit
</UL>

<P><STRONG><a name="[13a]"></a>RTC_NVIC_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtclocalmodule.o(i.RTC_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Local_Init
</UL>

<P><STRONG><a name="[c3]"></a>IICGetACK</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, iicbsp.o(i.IICGetACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IICGetACK
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>

<P><STRONG><a name="[c4]"></a>IICGetOneByte</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, iicbsp.o(i.IICGetOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IICGetOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>

<P><STRONG><a name="[c6]"></a>IICSendOneByte</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, iicbsp.o(i.IICSendOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>

<P><STRONG><a name="[c7]"></a>IICSetACK</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iicbsp.o(i.IICSetACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICSetACK
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>

<P><STRONG><a name="[c8]"></a>IICSetNACK</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iicbsp.o(i.IICSetNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICSetNACK
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>

<P><STRONG><a name="[c5]"></a>IICStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iicbsp.o(i.IICStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICStart
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>

<P><STRONG><a name="[c9]"></a>IICStop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, iicbsp.o(i.IICStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICStop
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>

<P><STRONG><a name="[142]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[143]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[15b]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[153]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[169]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[15f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
